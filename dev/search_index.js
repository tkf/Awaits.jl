var documenterSearchIndex = {"docs":
[{"location":"#Awaits.jl-1","page":"Home","title":"Awaits.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"index.md\"]","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [Awaits]\nPrivate = false","category":"page"},{"location":"#Awaits.Awaits","page":"Home","title":"Awaits.Awaits","text":"Awaits: [WIP] Structured concurrency for parallel computing\n\n(Image: Dev) (Image: Build Status) (Image: Codecov) (Image: Coveralls) (Image: GitHub last commit)\n\n\n\n\n\n","category":"module"},{"location":"#Awaits.@await-Tuple{Any}","page":"Home","title":"Awaits.@await","text":"@await body\n\nHandle an exception returned from body.  If body evaluates to an Exception, it cancels all the tasks attached to the current context.\n\nThe variable _ in code like @await f(_, x, y) is replaced by the current task context.  It must be invoked inside @taskgroup or @in macros.\n\n\n\n\n\n","category":"macro"},{"location":"#Awaits.@cancelscope-Tuple{Any}","page":"Home","title":"Awaits.@cancelscope","text":"@cancelscope(body) :: TaskContext\n\nCreate a task context with a new scope of cancellation.  That is to say, error in @await inside of @cancelscope do not cancel tasks outside of this scope.\n\n\n\n\n\n","category":"macro"},{"location":"#Awaits.@check-Tuple{}","page":"Home","title":"Awaits.@check","text":"@check [context]\n\nCheck context and exit the function (do return Cancelled()) if it is required.\n\n\n\n\n\n","category":"macro"},{"location":"#Awaits.@go-Tuple{Any}","page":"Home","title":"Awaits.@go","text":"@go body\n\nA wrapper of Threads.@spawn that makes cancellation work.\n\nThe variable _ in code like @go f(_, x, y) is replaced by the current task context.  It must be invoked inside @taskgroup or @in macros.\n\n\n\n\n\n","category":"macro"},{"location":"#Awaits.@in-Tuple{Any,Any}","page":"Home","title":"Awaits.@in","text":"@in context body\n\nEnter into the task context so that other macros like @go works as expected.  This should be used inside a function in which the task context is passed by a caller (for example, using @go f(_) macro).\n\n\n\n\n\n","category":"macro"},{"location":"#Awaits.@taskgroup-Tuple{Any}","page":"Home","title":"Awaits.@taskgroup","text":"@taskgroup(body)\n\nCreate a new task context.  This is an extension of the @sync block.\n\n\n\n\n\n","category":"macro"},{"location":"internals/#Internals-1","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/#","page":"Internals","title":"Internals","text":"Modules = [Awaits]\nPublic = false","category":"page"},{"location":"internals/#Awaits.SyncSeq","page":"Internals","title":"Awaits.SyncSeq","text":"SyncSeq([values])\n\nA minimalistic wrapper of Vector{Any} that can be used from multiple threads.\n\n\n\n\n\n","category":"type"}]
}
